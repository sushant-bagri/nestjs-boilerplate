module.exports = {
  env: {
      browser: true,
      es2020: true,
  },
  extends: ["prettier"], // 'plugin:@typescript-eslint/recommended' , 'prettier', 'eslint:recommended'
  parser: '@typescript-eslint/parser',
  parserOptions: {
      // ecmaVersion: 11,
      sourceType: 'module',
      project: './tsconfig.json',
  },
  plugins: [
      '@typescript-eslint',
      "prettier",
      'unicorn',
  ],
  rules: {
      'max-len': [
          'error',
          {
              code: 120,
              ignoreComments: true,
              ignoreTrailingComments: true,
              ignoreUrls: true,
              ignoreStrings: true,
              ignoreTemplateLiterals: true,
          },
      ],
      'import/prefer-default-export': 'off',
      'import/no-unresolved': 'off', // need to resolve
      'consistent-return': 'off',
      'import/extensions': 'off',
      'no-throw-literal': 'off',
      'no-console': 'error',
      camelcase: 'off', // need to implement later
      'no-param-reassign': 'off',
      'no-use-before-define': 'error',
      'new-cap': 'off',
      'no-bitwise': 'off',
      eqeqeq: 'error',
      'no-empty-function': ['error', { allow: ['constructors'] }],
      'no-useless-catch': 'error',
      'no-underscore-dangle': 'off',
      'no-shadow': 'off', // throws error for enum, @typescript-eslint/no-shadow can be used instead
      '@typescript-eslint/no-shadow': 'error',
      'no-restricted-syntax': 'off',
      'default-case': 'error',
      'no-await-in-loop': 'off',
      indent: 'off',
      'operator-linebreak': ['error', 'after', { overrides: { '=': 'after', ':': 'before', '?': 'before' } }],
      'class-methods-use-this': 'off',
      'no-return-await': 'off',
      'no-plusplus': 'off',
      radix: 'off', // need to implement later
      'no-prototype-builtins': 'off',
      'no-unused-vars': 'off',
      '@typescript-eslint/no-unused-vars': ['error', { args: 'none' }],
      'prefer-template': 'off',
      'object-curly-newline': 'off',
      'no-lonely-if': 'off',
      'no-continue': 'off',
      semi: 'off',
      '@typescript-eslint/semi': ['error'],
      'no-extra-semi': 'error',
      '@typescript-eslint/no-extra-semi': 'error',
      // above rules are airbnb overrides
      '@typescript-eslint/no-inferrable-types': 'off',
      '@typescript-eslint/no-explicit-any': 'error', // @TODO: change this to error
      '@typescript-eslint/no-empty-interface': 'error',
      // above rules are @typescript-eslint overrides
      'sort-imports': 'off', // need to discuss
      'object-curly-spacing': [
          'error',
          'always',
          {
            arraysInObjects: true,
            objectsInObjects: true,
          },
      ],
      'no-multi-spaces': 'error',
      complexity: 'off',
      'guard-for-in': 'error',
      'no-caller': 'error',
      'no-duplicate-imports': 'error',
      'no-eval': 'error',
      'no-extra-bind': 'error',
      'no-invalid-this': 'error',
      'no-multiple-empty-lines': ['error', { max: 1 }],
      'no-new-func': 'error',
      'no-trailing-spaces': 'error',
      'no-undef-init': 'error',
      'no-unused-expressions': 'error',
      'no-var': 'error',
      'prefer-const': 'error',
      'valid-typeof': 'error',
      'bracketSpacing': 'off',
      'tsdoc/syntax': 'off', // Need to use it
      'padding-line-between-statements': ['error', { blankLine: 'always', prev: '*', next: 'return' }],
      'prettier/prettier': ['error', { singleQuote: true, trailingComma: 'all', tabWidth: 2 }],
      '@typescript-eslint/adjacent-overload-signatures': 'error',
      '@typescript-eslint/array-type': ['error', { default: 'array-simple' }],
      '@typescript-eslint/ban-types': [
      'error',
      {
          types: {
          String: {
              message: 'Use string instead',
              fixWith: 'string',
          },
          '{}': {
              message: 'Use Record<string, any> instead',
              fixWith: 'Record<string, any>',
          },
          object: {
              message: 'Use Record<string, any> instead',
              fixWith: 'Record<string, any>',
          },
          },
      },
      ],
      '@typescript-eslint/explicit-member-accessibility': [
      'off',
      {
          overrides: {
          constructors: 'off',
          },
      },
      ],
      '@typescript-eslint/member-delimiter-style': [
      'error',
      {
          multiline: {
          delimiter: 'semi',
          requireLast: true,
          },
          singleline: {
          delimiter: 'semi',
          requireLast: false,
          },
      },
      ],
      '@typescript-eslint/member-ordering': 'off',
      '@typescript-eslint/no-angle-bracket-type-assertion': 'off',
      '@typescript-eslint/await-thenable': 'error',
      '@typescript-eslint/ban-ts-comment': 'error',
      '@typescript-eslint/ban-tslint-comment': 'error',
      '@typescript-eslint/consistent-indexed-object-style': 'error',
      '@typescript-eslint/consistent-type-definitions': ['error', 'interface'],
      '@typescript-eslint/consistent-type-imports': 'off',
      '@typescript-eslint/no-misused-new': 'error',
      '@typescript-eslint/no-unsafe-assignment': 'off',
      '@typescript-eslint/no-unsafe-call': 'off',
      '@typescript-eslint/no-unsafe-member-access': 'off',
      '@typescript-eslint/no-unsafe-return': 'off',
      '@typescript-eslint/restrict-template-expressions': 'off',
      'keyword-spacing': 'off',
      '@typescript-eslint/keyword-spacing': 'error',
      '@typescript-eslint/no-namespace': 'error',
      '@typescript-eslint/no-this-alias': 'error',
      '@typescript-eslint/no-use-before-declare': 'off',
      '@typescript-eslint/no-var-requires': 'error',
      '@typescript-eslint/prefer-for-of': 'error',
      '@typescript-eslint/prefer-function-type': 'error',
      '@typescript-eslint/prefer-namespace-keyword': 'error',
      '@typescript-eslint/quotes': [
      'error',
      'single',
      {
          avoidEscape: true,
      },
      ],
      '@typescript-eslint/naming-convention': [
      'error',
      {
          selector: 'default',
          format: ['camelCase', 'PascalCase', 'snake_case', 'UPPER_CASE'],
          filter: {
          regex: '^_.*$',
          match: false,
          },
      },
      {
          selector: 'variable',
          format: ['camelCase', 'UPPER_CASE', 'PascalCase'],
      },
      {
          selector: 'interface',
          format: ['PascalCase'],
          prefix: ['I'],
      },
      {
          selector: 'typeLike',
          format: ['PascalCase', 'UPPER_CASE'],
      },
      {
          selector: 'memberLike',
          modifiers: ['private'],
          format: ['camelCase'],
          leadingUnderscore: 'allow',
      },
      {
          selector: 'variable',
          types: ['boolean'],
          format: ['PascalCase'],
          prefix: ['is', 'should', 'has', 'can', 'did', 'will'],
      },
      ],
      '@typescript-eslint/type-annotation-spacing': 'error',
      '@typescript-eslint/unified-signatures': 'error',
      'arrow-body-style': 'error',
      'arrow-parens': ['error', 'always'],
      'no-restricted-imports': [
      'error',
      {
          paths: [
          {
              name: 'rxjs/Rx',
              message: "Please import directly from 'rxjs' instead",
          },
          ],
      },
      ],
      '@typescript-eslint/interface-name-prefix': 'off',
      '@typescript-eslint/no-non-null-assertion': 'error',
      'constructor-super': 'error',
      curly: 'error',
      'dot-notation': 'error',
      'eol-last': 'error',
      'id-match': 'error',
      'import/no-default-export': 'off',
      'import/no-internal-modules': 'off',
      'import/order': 'off',
      'max-classes-per-file': ['error', 1],
      'new-parens': 'error',
      'no-cond-assign': 'error',
      'no-debugger': 'error',
      'no-duplicate-case': 'error',
      'no-useless-escape': 'off',
      '@typescript-eslint/no-duplicate-imports': ['error'],
      'no-empty': 'error',
      'no-fallthrough': 'error',
      'no-irregular-whitespace': 'error',
      'no-new-wrappers': 'error',
      'no-redeclare': 'off',
      'no-sequences': 'error',
      'no-sparse-arrays': 'error',
      'no-template-curly-in-string': 'error',
      'no-unsafe-finally': 'error',
      'no-unused-labels': 'error',
      'object-shorthand': 'error',
      'prefer-object-spread': 'error',
      'quote-props': ['error', 'consistent-as-needed'],
      'use-isnan': 'error',
      'space-before-function-paren': 'off',
      'unicorn/better-regex': 'error',
      'unicorn/empty-brace-spaces': 'error',
      'unicorn/error-message': 'error',
      'unicorn/escape-case': 'error',
      'unicorn/expiring-todo-comments': 'error',
      'unicorn/explicit-length-check': 'error',
      'unicorn/import-index': 'error',
      'unicorn/import-style': 'error',
      'unicorn/new-for-builtins': 'error',
      'unicorn/no-array-callback-reference': 'error',
      'unicorn/no-array-push-push': 'error',
      'unicorn/no-console-spaces': 'error',
      'unicorn/no-for-loop': 'error',
      'unicorn/no-hex-escape': 'error',
      'unicorn/no-instanceof-array': 'error',
      'unicorn/no-nested-ternary': 'error',
      'unicorn/no-new-array': 'error',
      'unicorn/no-new-buffer': 'error',
      'unicorn/no-object-as-default-parameter': 'error',
      'unicorn/no-this-assignment': 'error',
      'unicorn/no-unreadable-array-destructuring': 'error',
      'unicorn/no-useless-undefined': 'error',
      'unicorn/no-zero-fractions': 'error',
      'unicorn/number-literal-case': 'error',
      'unicorn/numeric-separators-style': 'error',
      'unicorn/prefer-add-event-listener': 'error',
      'unicorn/prefer-array-find': 'error',
      'unicorn/prefer-array-flat': 'error',
      'unicorn/prefer-array-flat-map': 'error',
      'unicorn/prefer-array-index-of': 'error',
      'unicorn/prefer-array-some': 'error',
      'unicorn/prefer-date-now': 'error',
      'unicorn/prefer-default-parameters': 'error',
      'unicorn/prefer-dom-node-append': 'error',
      'unicorn/prefer-dom-node-dataset': 'error',
      'unicorn/prefer-dom-node-remove': 'error',
      'unicorn/prefer-dom-node-text-content': 'error',
      'unicorn/prefer-includes': 'error',
      'unicorn/prefer-keyboard-event-key': 'error',
      'unicorn/prefer-math-trunc': 'error',
      'unicorn/prefer-modern-dom-apis': 'error',
      'unicorn/prefer-negative-index': 'error',
      'unicorn/prefer-optional-catch-binding': 'error',
      'unicorn/prefer-reflect-apply': 'error',
      'unicorn/prefer-regexp-test': 'error',
      'unicorn/prefer-set-has': 'error',
      'unicorn/prefer-spread': 'error',
      'unicorn/prefer-string-slice': 'error',
      'unicorn/prefer-string-starts-ends-with': 'error',
      'unicorn/prefer-string-trim-start-end': 'error',
      'unicorn/prefer-switch': 'error',
      'unicorn/prefer-ternary': 'error',
      'unicorn/prefer-type-error': 'error',
      'unicorn/throw-new-error': 'error',
  }
};
